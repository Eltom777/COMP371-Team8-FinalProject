#version 330 core
//
// Based on:
//  https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping
//  https://learnopengl.com/Lighting/Basic-Lighting
//  https://github.com/ChrisViral/COMP-371/blob/master/COMP-371/Shaders/lightFragment.frag
//Material
struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

//Light
struct Light
{
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

in vec3 vertexColor;
in vec2 vertexUV;
in vec3 vertexNormal;
in vec4 lightSpacePosition;
in vec3 fragPosition;

//Textures
uniform sampler2D textureSampler;

//Lighting
uniform Material material;
uniform Light light;
uniform vec3 viewPos;

//Flags
uniform bool isTexture;
uniform bool isLighting;
        
out vec4 FragColor;

void main()
{
  vec3 fragmentColour;
  vec4 f;

  if(isTexture){
    fragmentColour = texture( textureSampler, vertexUV).rgb;
  }
  else{
    fragmentColour = vec3(vertexColor.r, vertexColor.g, vertexColor.b);
  }

  if(isLighting) { //Phong Model

    //Ambient light
    vec3 ambient = light.ambient * material.ambient;

    //Diffuse
    //vec3 n = normalize(vertexColor);
    //vec3 diff = fragPosition - light.position;
    //vec3 lightDir = normalize(-diff);
    //vec3 diffuse = max(dot(n, lightDir), 0.0) * light.diffuse * material.diffuse;
    
    //Specular
    //vec3 viewDir = viewPos - fragPosition;
    //vec3 specular = pow(max(dot(normalize(viewDir), reflect(-lightDir, n)), 0.0), material.shininess) * light.specular * material.specular;
  
    f = vec4( ambient * fragmentColour, 1.0f); // include shadows * later & (ambient + ((diffuse + specular)))
  
  }
  else{
    f =  vec4(fragmentColour, 1.0f);
  }
 
    FragColor = f;
};