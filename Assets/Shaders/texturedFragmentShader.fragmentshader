#version 330 core

in vec3 vertexColor;
in vec2 vertexUV;

// Lighting input
// 0 = wood, 1 = cement, 2 = metal
flat in int textureType;
in vec3 Normal;
in vec3 FragPos;
// in vec3 LightPos; // view-space

uniform bool isTexture;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

uniform sampler2D textureSampler;
        
out vec4 FragColor;
void main()
{
    float materialShininess;
    vec3 materialAmbient;
    vec3 materialDiffuse;
    vec3 materialSpecular;

    // Selecting the correct material component
    switch (textureType)
    {
        case 0:
            materialAmbient = vec3(0.1f, 0.1f, 0.1f);
            materialDiffuse = vec3(0.2f, 0.2f, 0.2f);
            materialSpecular = vec3(0.5f, 0.5f, 0.5f);
            materialShininess = 8.0f;
            break;
        case 1:
            materialAmbient = vec3(0.15f, 0.15f, 0.15f);
            materialDiffuse = vec3(0.18f, 0.17f, 0.22f);
            materialSpecular = vec3(0.3f, 0.3f, 0.3f);
            materialShininess = 32.0f;;
            break;
        case 2:
            materialAmbient = vec3(0.25f, 0.25f, 0.25f);
            materialDiffuse = vec3(0.4f, 0.4f, 0.4f);
            materialSpecular = vec3(0.7f, 0.7f, 0.7f);
            materialShininess = 128.0f;;
            break;
        default:
            break;
    }

    vec4 textureColor;

    if(isTexture){
        textureColor = texture( textureSampler, vertexUV );
    }
    else{
        textureColor = vec4(vertexColor.r, vertexColor.g, vertexColor.b, 1.0);
    }

    // vec4 textureColor = texture( textureSampler, vertexUV );

    // ambient
	float ambientStrength = 4.0;
	vec3 ambient = ambientStrength * (materialAmbient * lightColor);

    // diffuse
	vec3 norm = normalize(Normal);
	// vec3 lightDir = normalize(LightPos - FragPos); // view-space
    vec3 lightDir = normalize(lightPos); // world space
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor * materialDiffuse;

    // specular
	float specularStrength = 10.0;
    vec3 viewDir = normalize(viewPos - FragPos); // World space
	// vec3 viewDir = normalize(FragPos); // view-space
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), materialShininess);
	vec3 specular = specularStrength * (materialSpecular * spec * lightColor);

    vec4 tempResult = vec4((ambient + diffuse + specular), 1.0);
    vec4 result = textureColor; //tempResult * textureColor; //if you want lighting

    FragColor =  result;
};